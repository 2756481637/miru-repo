// ==MiruExtension==
// @name         GoGoAnime
// @version      v0.0.1
// @author       OshekharO
// @lang         en
// @license      MIT
// @icon         https://avatars.githubusercontent.com/u/74993083?s=200&v=4
// @package      gogo.anime
// @type         bangumi
// @webSite      https://api.consumet.org/anime/gogoanime
// ==/MiruExtension==

export default class extends Extension {
  async req(url) {
    return this.request(url, {
      headers: {
        "Miru-Url": await this.getSetting("gogoApi"),
      },
    });
  }

  async load() {
    this.registerSetting({
      title: "GoGo API",
      key: "gogoApi",
      type: "input",
      description: "GoGo Api Url",
      defaultValue: "https://api.consumet.org/anime/gogoanime",
    });
    this.registerSetting({
      title: "Use nade.me Proxy",
      key: "nadeProxy",
      type: "toggle",
      description: "Use nade.me Proxy",
      defaultValue: "true",
    });
  }

  async latest(page) {
    const res = await this.req(`/top-airing?page=${page}`);
    return res.results.map((item) => ({
      title: item.title,
      url: item.id,
      cover: item.image,
    }));
  }

  async detail(url) {
    const res = await this.req(`/info/${url}`);
    return {
      title: res.title,
      cover: res.image,
      desc: res.description,
      episodes: [
        {
          title: "Ep",
          urls: res.episodes.map((item) => ({
            name: `Episode ${item.number}`,
            url: item.id,
          })),
        },
      ],
    };
  }

  async search(kw, page) {
    const res = await this.req(`/${kw}?page=${page}`);
    return res.results.map((item) => ({
      title: item.title,
      url: item.id,
      cover: item.image,
    }));
  }

  async watch(url) {
    const res = await this.req(`/watch/${url}?server=gogocdn`);

    const getM3u8 = async (sourcesId) => {
      const res = await this.req(`/source/${sourcesId}`);
      if ((await this.getSetting("nadeProxy")) == "true") {
        const url = await (
          await fetch("https://enime.moe/api/generate-cdn", {
            method: "POST",
            body: sourcesId,
          })
        ).text();
        console.log(url);
        return url;
      }
      return res.url;
    };

    return {
      type: "hls",
      url: await getM3u8(res.sources[0].id),
      controls: [
        {
          name: "source",
          html: "Source",
          position: "right",
          selector: res.sources.map((item) => ({
            name: item.id,
            html: item.url,
          })),
          onSelect: async function (item) {
            const m3u8 = await getM3u8(item.name);
            this.switchUrl(m3u8);
          },
        },
      ],
    };
  }
}
